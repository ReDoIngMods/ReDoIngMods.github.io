---
// SearchDocs.astro - Client-side fuzzy search for documentation
---

<div class="search-container">
  <div class="search-input-wrapper">
    <input 
      type="text" 
      id="doc-search" 
      class="search-input" 
      placeholder="Search documentation..." 
      autocomplete="off"
    />
    <div class="search-icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
      </svg>
    </div>
    <button id="clear-search" class="clear-button hidden">Ã—</button>
  </div>
  <div id="search-results" class="search-results hidden">
    <div class="no-results hidden">No results found.</div>
    <ul class="results-list"></ul>
  </div>
</div>

<script>
  // We'll load this dynamically for better performance
  let fuse = null;
  let searchData = null;
  let searchInitialized = false;
  let searchInitializing = false;
  let searchError = null;
  
  // Only initialize search when the user interacts with the search box
  const searchInput = document.getElementById('doc-search');
  const searchResults = document.getElementById('search-results');
  const resultsList = document.querySelector('.results-list');
  const noResults = document.querySelector('.no-results');
  const clearButton = document.getElementById('clear-search');
  
  // Lazy load Fuse.js when user focuses on search
  searchInput.addEventListener('focus', async () => {
    if (!fuse && !searchInitializing && !searchError) {
      await initializeSearch();
    }
  });
  
  // Clear search when clicking the clear button
  clearButton.addEventListener('click', () => {
    searchInput.value = '';
    hideResults();
    clearButton.classList.add('hidden');
  });
  
  // Handle input in search box
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    
    if (query) {
      clearButton.classList.remove('hidden');
      
      // Only perform search if fuse is initialized
      if (fuse) {
        performSearch(query);
      } else if (searchError) {
        showSearchError();
      } else if (!searchInitializing) {
        // Try initializing search if it hasn't been attempted yet
        initializeSearch().then(() => {
          if (fuse) performSearch(query);
        });
      }
    } else {
      clearButton.classList.add('hidden');
      hideResults();
    }
  });
  
  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.search-container')) {
      hideResults();
    }
  });
  
  // Initialize search functionality
  async function initializeSearch() {
    if (searchInitialized || searchInitializing) return;
    
    searchInitializing = true;
    
    try {
      // Dynamic import of Fuse.js
      const Fuse = (await import('fuse.js')).default;
      
      // Fetch the search index
      const response = await fetch('/search-index.json');
      
      if (!response.ok) {
        throw new Error(`Failed to load search index: ${response.status} ${response.statusText}`);
      }
      
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error(`Invalid content type: ${contentType}. Expected application/json`);
      }
      
      searchData = await response.json();
      
      if (!Array.isArray(searchData)) {
        throw new Error('Search data is not an array');
      }
      
      // Create a new Fuse instance with appropriate options
      fuse = new Fuse(searchData, {
        keys: ['title', 'headings', 'content'],
        includeMatches: true,
        threshold: 0.3,
        distance: 100,
        useExtendedSearch: true,
        ignoreLocation: true
      });
      
      searchInitialized = true;
      console.log('Search functionality initialized!');
    } catch (error) {
      searchError = error;
      console.error('Failed to initialize search:', error);
      
      // Show error in search results if user has already typed something
      if (searchInput.value.trim()) {
        showSearchError();
      }
    } finally {
      searchInitializing = false;
    }
  }
  
  // Show search initialization error
  function showSearchError() {
    resultsList.innerHTML = '';
    noResults.textContent = 'Search is currently unavailable. Please try again later.';
    noResults.classList.remove('hidden');
    searchResults.classList.remove('hidden');
  }
  
  // Perform the search and show results
  function performSearch(query) {
    if (!fuse) return;
    
    const results = fuse.search(query);
    displayResults(results);
  }
  
  // Display search results - simplified version
  function displayResults(results) {
    // Clear previous results
    resultsList.innerHTML = '';
    
    if (results.length === 0) {
      // Show "no results" message
      noResults.textContent = 'No results found.';
      noResults.classList.remove('hidden');
      searchResults.classList.remove('hidden');
      return;
    }
    
    // Hide "no results" message
    noResults.classList.add('hidden');
    
    // Add new results - simplified for robustness
    results.slice(0, 8).forEach(result => {
      const item = document.createElement('li');
      
      // Create URL with hash if we found a heading match
      let url = result.item.url;
      let matchedHeading = '';
      
      // Check if we have a match in a heading
      if (result.matches) {
        const headingsMatch = result.matches.find(m => m.key === 'headings');
        if (headingsMatch && headingsMatch.indices.length) {
          const headingIndex = headingsMatch.refIndex;
          if (headingIndex !== undefined && result.item.headings && result.item.headings[headingIndex]) {
            const heading = result.item.headings[headingIndex];
            const headingId = heading
              .toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/[\s-]+/g, '-');
            
            url = `${result.item.url}#${headingId}`;
            matchedHeading = heading;
          }
        }
      }
      
      // Create the link
      const link = document.createElement('a');
      link.href = url;
      link.classList.add('search-result-link');
      
      // Simple, robust result layout
      const resultLayout = document.createElement('div');
      resultLayout.className = 'result-layout';
      
      // Title
      const titleEl = document.createElement('div');
      titleEl.className = 'result-title';
      titleEl.textContent = result.item.title || 'Untitled';
      resultLayout.appendChild(titleEl);
      
      // Section indicator (if any)
      if (matchedHeading) {
        const sectionEl = document.createElement('div');
        sectionEl.className = 'result-section';
        sectionEl.textContent = `Section: ${matchedHeading}`;
        resultLayout.appendChild(sectionEl);
      }
      
      // Add the result layout to link
      link.appendChild(resultLayout);
      item.appendChild(link);
      resultsList.appendChild(item);
    });
    
    searchResults.classList.remove('hidden');
  }
  
  // Hide search results
  function hideResults() {
    searchResults.classList.add('hidden');
    noResults.classList.add('hidden');
  }
</script>

<style>
  .search-container {
    position: relative;
    width: 100%;
    margin-bottom: 1.25rem;
  }
  
  .search-input-wrapper {
    position: relative;
  }
  
  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--sm-yellow);
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
  }
  
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    color: white;
    background-color: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(255, 215, 0, 0.3);
    border-radius: 0 12px 0 12px;
    font-size: 0.95rem;
    transition: all 0.2s ease;
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--sm-yellow);
    box-shadow: 0 0 0 1px rgba(255, 215, 0, 0.2);
  }
  
  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
    opacity: 1;
  }
  
  .clear-button {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.5);
    font-size: 1.25rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 1.5rem;
    width: 1.5rem;
    border-radius: 50%;
    transition: all 0.2s ease;
  }
  
  .clear-button:hover {
    color: white;
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .search-results {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background-color: var(--sm-ui-color);
    border-radius: 0 12px 0 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    max-height: 400px;
    overflow-y: auto;
    z-index: 10;
    border: 1px solid rgba(255, 215, 0, 0.3);
    color: white;
  }
  
  .results-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  
  .results-list li {
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .results-list li:last-child {
    border-bottom: none;
  }
  
  /* Simpler, more robust search result styles */
  .search-result-link {
    display: block;
    padding: 0.75rem;
    text-decoration: none;
    color: white;
    transition: background-color 0.2s ease;
  }
  
  .search-result-link:hover {
    background-color: rgba(255, 215, 0, 0.1);
    color: white;
  }
  
  .result-layout {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .result-title {
    font-weight: 600;
    font-size: 1rem;
    color: var(--sm-yellow);
  }
  
  .result-section {
    font-size: 0.9rem;
    color: white;
    opacity: 0.8;
    background-color: rgba(0, 0, 0, 0.2);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    width: fit-content;
  }
  
  .no-results {
    padding: 1rem;
    text-align: center;
    color: white;
    font-style: italic;
  }
  
  .hidden {
    display: none;
  }
</style>