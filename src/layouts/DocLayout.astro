---
import Layout from './Layout.astro';
import ImprovedSearch from '../components/ImprovedSearch.astro'; // Updated to use ImprovedSearch

export interface Props {
	title: string;
	description?: string;
}

const { title, description } = Astro.props;
---

<Layout noLeftPadding={true} noRightPadding={true} title={title} description={description}>
	<div class="flex flex-col md:flex-row gap-8">
		<aside class="w-full md:w-64 flex-shrink-0">
			<div class="bg-sm-ui p-4 rounded-tr-[24px] rounded-bl-[24px] sticky top-8">
				<h3 class="text-white text-xl mb-4 site-title">Documentation</h3>
				
				<ImprovedSearch 
					inputId="doc-search-input" 
					clearButtonId="doc-clear-button" 
					resultsId="doc-results-container" 
					placeholder="Search documentation..." 
				/>
				
				<nav class="docs-nav">
					<ul class="space-y-2">
						<li><a href="/docs" class="text-white hover:text-sm-yellow">Introduction</a></li>
						<li><a href="/docs/getting-started" class="text-white hover:text-sm-yellow">Getting Started</a></li>
						
						<!-- Mod Development dropdown example
						<li class="dropdown-container">
							<button class="dropdown-toggle text-sm-yellow w-full text-left flex items-center justify-between" aria-expanded="false">
								<span class="block mt-4 mb-2">Mod Development</span>
								<span class="dropdown-icon">Â»</span>
							</button>
							<ul class="dropdown-content pl-4 space-y-2 hidden">
								<li><a href="/docs/basics" class="text-white hover:text-sm-yellow">Basics</a></li>
								<li><a href="/docs/item-creation" class="text-white hover:text-sm-yellow">Item Creation</a></li>
								<li><a href="/docs/lua-scripting" class="text-white hover:text-sm-yellow">Lua Scripting</a></li>
								<li><a href="/docs/json-formatting" class="text-white hover:text-sm-yellow">JSON Formatting</a></li>
							</ul>
						</li> -->
					</ul>
				</nav>
			</div>
		</aside>

		<div class="flex-grow">
			<article class="doc-content shadow-lg">
				<slot />
			</article>
		</div>
	</div>
</Layout>

<style>
	.docs-nav a {
		display: block;
		padding: 0.25rem 0;
		transition: color 0.2s ease;
	}
	
	.dropdown-icon {
		font-size: 1.2rem;
		transition: transform 0.3s ease;
	}
	
	.dropdown-toggle[aria-expanded="true"] .dropdown-icon {
		transform: rotate(90deg);
	}
	
	.dropdown-toggle {
		cursor: pointer;
		transition: color 0.2s ease;
		/* Using CSS custom properties for the yellow colors */
		--sm-yellow-color: #ffd700; /* Base yellow */
		--sm-yellow-hover: #ffef99; /* Lighter yellow for hover */
		--sm-yellow-active: #fff5cc; /* Even lighter yellow for active/click */
	}
	
	.dropdown-toggle:hover {
		color: var(--sm-yellow-hover);
	}
	
	.dropdown-toggle:active {
		color: var(--sm-yellow-active);
	}
	
	/* Styles for section highlighting */
	:target {
		scroll-margin-top: 2rem;
	}
	
	:target::before {
		content: '';
		display: block;
		position: absolute;
		left: -1rem;
		top: 0;
		bottom: 0;
		width: 0.25rem;
		border-radius: 0.125rem;
		background-color: var(--sm-yellow);
		animation: pulse 2s ease-out 1;
	}
	
	@keyframes pulse {
		0% {
			box-shadow: 0 0 0 0 rgba(255, 215, 0, 0.7);
		}
		70% {
			box-shadow: 0 0 0 10px rgba(255, 215, 0, 0);
		}
		100% {
			box-shadow: 0 0 0 0 rgba(255, 215, 0, 0);
		}
	}

	/* Make the buttons rounded on all corners */
	.sm-button {
		border-radius: 12px !important;
		clip-path: none !important;
	}

	.sm-button::before {
		border-radius: 8px !important;
	}

	.modal-close {
		border-radius: 12px !important;
	}
	
	/* Search highlighting styles */
	.search-highlight {
		background-color: var(--sm-yellow);
		color: black;
		padding: 0.125rem 0.25rem;
		border-radius: 3px;
		font-weight: 600;
	}
	
	@keyframes search-highlight-pulse {
		0%, 100% { 
			background-color: var(--sm-yellow);
			transform: scale(1);
		}
		50% { 
			background-color: rgba(255, 215, 0, 0.8);
			transform: scale(1.05);
		}
	}
	
	/* Search notification styles */
	.search-notification {
		position: fixed;
		top: 2rem;
		right: 2rem;
		z-index: 1000;
		background: linear-gradient(135deg, var(--sm-ui-color) 0%, rgba(45, 45, 45, 0.95) 100%);
		border: 1px solid var(--sm-yellow);
		border-radius: 0 12px 0 12px;
		box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
		backdrop-filter: blur(10px);
		animation: slideInRight 0.3s ease-out;
	}
	
	@keyframes slideInRight {
		from {
			transform: translateX(100%);
			opacity: 0;
		}
		to {
			transform: translateX(0);
			opacity: 1;
		}
	}
	
	.notification-content {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 1rem 1.25rem;
		color: white;
	}
	
	.notification-icon {
		font-size: 1.25rem;
	}
	
	.notification-text {
		flex: 1;
		font-size: 0.9rem;
	}
	
	.notification-close {
		background: none;
		border: none;
		color: rgba(255, 255, 255, 0.7);
		cursor: pointer;
		font-size: 1.25rem;
		padding: 0.25rem;
		border-radius: 50%;
		transition: all 0.2s ease;
	}
	
	.notification-close:hover {
		color: white;
		background-color: rgba(255, 255, 255, 0.1);
	}
	
	@media (max-width: 768px) {
		.search-notification {
			top: 1rem;
			right: 1rem;
			left: 1rem;
		}
		
		.notification-content {
			padding: 0.75rem 1rem;
		}
		
		.notification-text {
			font-size: 0.85rem;
		}
	}
</style>

<script>
	// Initialize dropdowns on page load
	document.addEventListener('DOMContentLoaded', () => {
		const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
		
		dropdownToggles.forEach(toggle => {
			toggle.addEventListener('click', () => {
				// Get the dropdown content associated with this toggle
				const content = toggle.nextElementSibling;
				const expanded = toggle.getAttribute('aria-expanded') === 'true';
				
				// Toggle the aria-expanded attribute
				toggle.setAttribute('aria-expanded', !expanded ? 'true' : 'false');
				
				// Toggle the visibility of the dropdown content
				content?.classList.toggle('hidden');
			});
		});
		
		// Check if there's a hash in the URL and expand the relevant dropdown
		const expandRelevantDropdown = () => {
			const path = window.location.pathname;
			
			dropdownToggles.forEach(toggle => {
				const content = toggle.nextElementSibling;
				const links = content?.querySelectorAll('a');
				
				// Check if any of the links in this dropdown match the current path
				const shouldExpand = Array.from(links || []).some(link => 
					link.getAttribute('href') === path || path.startsWith(link.getAttribute('href') + '/')
				);
				
				if (shouldExpand) {
					toggle.setAttribute('aria-expanded', 'true');
					content?.classList.remove('hidden');
				}
			});
		};
		
		expandRelevantDropdown();
	});
	
	// Function to handle scrolling to sections when URL hash is present
	document.addEventListener('DOMContentLoaded', () => {
		// Handle initial hash if present
		if (window.location.hash) {
			const targetElement = document.querySelector(window.location.hash);
			if (targetElement) {
				// Scroll to the element after a short delay to ensure layout is complete
				setTimeout(() => {
					targetElement.scrollIntoView();
				}, 200);
			}
		}
		
		// Add IDs to all headings in the document for better anchoring
		const contentArea = document.querySelector('.doc-content');
		if (contentArea) {
			const headings = contentArea.querySelectorAll('h1, h2, h3, h4, h5, h6');
			headings.forEach(heading => {
				if (!heading.id) {
					const headingId = heading.textContent
						.toLowerCase()
						.replace(/[^\w\s-]/g, '')
						.replace(/[\s-]+/g, '-');
					heading.id = headingId;
				}
				
				// Make headings relative position for the target indicator
				heading.style.position = 'relative';
			});
		}
		
		// Handle search highlighting from search results
		handleSearchHighlighting();
	});
	
	// Function to highlight search terms when coming from search results
	function handleSearchHighlighting() {
		const shouldHighlight = sessionStorage.getItem('searchHighlight');
		const searchQuery = sessionStorage.getItem('searchQuery');
		
		if (shouldHighlight === 'true' && searchQuery) {
			// Clear the session storage
			sessionStorage.removeItem('searchHighlight');
			sessionStorage.removeItem('searchQuery');
			
			// Highlight search terms in the content
			highlightSearchTerms(searchQuery);
			
			// Show a subtle notification
			showSearchNotification(searchQuery);
		}
	}
	
	function highlightSearchTerms(query) {
		const contentArea = document.querySelector('.doc-content') || document.querySelector('article');
		if (!contentArea || !query) return;
		
		const words = query.toLowerCase().split(/\s+/).filter(w => w.length > 1);
		if (words.length === 0) return;
		
		// Create a regex pattern for all search terms
		const pattern = words.map(word => escapeRegExp(word)).join('|');
		const regex = new RegExp(`\\b(${pattern})\\b`, 'gi');
		
		// Function to highlight text in text nodes
		function highlightInTextNode(node) {
			if (node.nodeType === Node.TEXT_NODE) {
				const text = node.textContent;
				if (regex.test(text)) {
					const highlightedText = text.replace(regex, '<mark class="search-highlight">$1</mark>');
					const tempDiv = document.createElement('div');
					tempDiv.innerHTML = highlightedText;
					
					// Replace the text node with highlighted content
					const fragment = document.createDocumentFragment();
					while (tempDiv.firstChild) {
						fragment.appendChild(tempDiv.firstChild);
					}
					node.parentNode.replaceChild(fragment, node);
				}
			} else if (node.nodeType === Node.ELEMENT_NODE && node.tagName !== 'SCRIPT' && node.tagName !== 'STYLE') {
				// Recursively process child nodes
				const children = Array.from(node.childNodes);
				children.forEach(child => highlightInTextNode(child));
			}
		}
		
		highlightInTextNode(contentArea);
		
		// Scroll to the first highlight after a delay
		setTimeout(() => {
			const firstHighlight = contentArea.querySelector('.search-highlight');
			if (firstHighlight) {
				firstHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
				// Add a pulse animation to draw attention
				firstHighlight.style.animation = 'search-highlight-pulse 2s ease-out';
			}
		}, 500);
	}
	
	function showSearchNotification(query) {
		// Create notification element
		const notification = document.createElement('div');
		notification.className = 'search-notification';
		notification.innerHTML = `
			<div class="notification-content">
				<span class="notification-icon">ð</span>
				<span class="notification-text">Highlighting results for "<strong>${escapeHtml(query)}</strong>"</span>
				<button class="notification-close" onclick="this.parentElement.parentElement.remove()">Ã</button>
			</div>
		`;
		
		// Add to page
		document.body.appendChild(notification);
		
		// Auto-remove after 5 seconds
		setTimeout(() => {
			if (notification.parentElement) {
				notification.remove();
			}
		}, 5000);
	}
	
	function escapeRegExp(string) {
		return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	
	function escapeHtml(text) {
		const div = document.createElement('div');
		div.textContent = text;
		return div.innerHTML;
	}
</script>